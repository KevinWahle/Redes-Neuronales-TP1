# -*- coding: utf-8 -*-
"""Helper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WohmxPAZ-mj5i0AI3F0zW4gMg8jxLmk7
"""

import matplotlib.pyplot as plt
from matplotlib.ticker import StrMethodFormatter
import numpy as np

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
 
def EDAGraph (freq, ax, title):
    ax.bar(class_names, freq)
    ax.set_xlabel('Class')
    ax.set_ylabel('Frequency')
    ax.set_title(title)
    ax.set_xticks(range(len(class_names)))
    ax.set_ylim([0, 0.15]) 
    ax.set_xticklabels(class_names, rotation=45)

    for i in range(len(class_names)):
        ax.text(i, freq[i] + 0.005, f"{freq[i]:.3f}", rotation=45, ha='center')


def acc_epoch_graph (hyper, hyper_name, accuracy_values, stop_epochs, log=False, rot=True):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))
    
    if type(hyper[0]) != str:
        hyper = [round(value, 6) for value in hyper]

    # Accuracy vs. Hyperparameter
    ax1.plot(hyper, accuracy_values, marker='o')
    if (log): ax1.set_xscale('log')
    ax1.set_xticks(hyper)
    ax1.set_xticklabels([str(i) for i in hyper])
    ax1.set_xlabel(hyper_name)
    if(rot): ax1.set_xticklabels([str(i) for i in hyper], rotation=45)
    ax1.set_ylabel('Accuracy')
    ax1.set_title('Accuracy vs. {}'.format(hyper_name))
    ax1.grid(True)

    # Stop Epoch vs. Hyperparameter
    ax2.plot(hyper, stop_epochs, marker='o')
    if(log):  ax2.set_xscale('log')
    ax2.set_xticks(hyper)
    ax2.set_xticklabels([str(i) for i in hyper])
    ax2.set_xlabel(hyper_name)
    if(rot):ax2.set_xticklabels([str(i) for i in hyper], rotation=45)
    ax2.set_ylabel('Stop Epoch')
    ax2.set_title('Stop Epoch vs. {}'.format(hyper_name))
    ax2.grid(True)

    plt.tight_layout()
    plt.show()

def plot_value_array(i, predictions_array):
    true_label=i
    predictions_array = predictions_array[i]
    predicted_label = np.argmax(predictions_array)

    thisplot = plt.bar(range(10), predictions_array, color='grey')
    thisplot[predicted_label].set_color('red')
    thisplot[true_label].set_color('blue')
    for j in range(len(predictions_array)):
        if predictions_array[j]>0.01:
            plt.text(j-0.4,predictions_array[j]+0.01,f"{predictions_array[j]:.2f}", rotation=45)
    plt.ylim([0, 1.15])
    plt.xticks(range(10), class_names, rotation=45)
    plt.title(class_names[true_label])
    
def class_average(predictions_array, true_label):
    class_averages = np.zeros((10, 10))
    for i in range(len(true_label)):
        class_averages[true_label[i]] += predictions_array[i]
        
    for i in range(10):
        class_averages[i] /= np.sum(true_label == i)

    return class_averages